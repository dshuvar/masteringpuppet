#!/bin/env python
# Python ENC
# receives fqdn as argument

import yaml
import sys
import re

"""output_yaml renders the hash as yaml and exits cleanly"""
def output_yaml(enc):
  # output the ENC as yaml
  print "---"
  print yaml.dump(enc)
  sys.exit(0)

# create an empty hash
enc = {}
enc["classes"] = {}
enc["classes"]["base"] = {}
enc["parameters"] = {}

try:
  fqdn=sys.argv[1]
except:
  # need a hostname
  sys.exit(10)


# split the fqdn into hostname, environment and domain
# then split hostname on _
try:
  (hostname,environment,domain) = fqdn.split('.',2)
  parts = hostname.split('_')
  try:
    role = parts[0]
    location = parts[1]
    os = parts[2][0]
    instance = parts[2][1:]

  except:
    # hostname doesn't conform
    # include a class which notifies us of the problem
    enc["classes"]["hostname_problem"] = hostname
    output_yaml(enc)

except:
  enc["classes"]["fqdn_problem"] = fqdn
  output_yaml(enc)
  
# map environment from hostname into environment
environments = {}
environments['prod'] = 'production'
environments['np'] = 'nonprod'
environments['dev'] = 'devel'
environments['sbx'] = 'sbx'
enc["environment"] = environments[environment]

# map role from hostname into role
enc["classes"][role] = {}

# set top scope variables
enc["parameters"]["enc_hostname"] = hostname
enc["parameters"]["role"] = role
enc["parameters"]["location"] = location
enc["parameters"]["os"] = os
enc["parameters"]["instance"] = instance
enc["parameters"]["domain"] = domain


output_yaml(enc)
